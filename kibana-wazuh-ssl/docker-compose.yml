version: '2.2'

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    container_name: certs
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: wazuh.manager\n"\
          "    dns:\n"\
          "      - wazuh.manager\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
        
        #### Elasticsearch Container Compose  #####    
  
  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    container_name: es01
    hostname: es01
    restart: always
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=${ES_NODE}
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=${ES_NODE}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    
    #### Kibana Container Compose  ##### 

  kibana:
    image: docker.elastic.co/kibana/kibana:${ES_VERSION}
    container_name: kib01
    hostname: kibana
    depends_on:
      es01:
        condition: service_healthy
    user: "0"
    command: >
      sh -c "chown -R kibana:kibana /usr/share/kibana/data &&
             chown -R kibana:kibana /usr/share/kibana/plugins &&
             /usr/share/kibana/bin/kibana-plugin install https://packages.wazuh.com/4.x/ui/kibana/wazuh_kibana-4.5.1_7.17.11-1.zip &&
             /usr/local/bin/kibana-docker --allow-root"
    ports:
      - 443:5601
      - ${KIBANA_PORT}:5601
    environment:

      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - 'ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=["certs/ca/ca.crt"]'
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=certificate
      - WAZUH_API_URL=${WAZUH_API_URL}
      - WAZUH_API_USERNAME=${WAZUH_API_USERNAME}
      - WAZUH_API_PASSWORD=${WAZUH_API_PASSWORD}
      # - SERVER_PUBLICBASEURL=http://localhost:5601

      # - XPACK_ENCRYPTION_KEY=${XPACK_ENCRYPTION_KEY}
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0

      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_KEY=certs/kibana/kibana.key
      - SERVER_SSL_CERTIFICATE=certs/kibana/kibana.crt
      - 'SERVER_SSL_CERTIFICATEAUTHORITIES=["certs/ca/ca.crt"]'

      - xpack.security.enabled=true
      # - XPACK_SECURITY_ENCRYPTIONKEY=${XPACK_ENCRYPTION_KEY}
      # - XPACK_REPORTING_ENCRYPTIONKEY=${XPACK_ENCRYPTION_KEY}
      # - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${XPACK_ENCRYPTION_KEY}

    restart: always
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    volumes: 
      - certs:/usr/share/kibana/config/certs:rw
      - kibanadata:/usr/share/kibana/data:rw
      - ./config/kibana/wazuh.yml:/usr/share/kibana/data/wazuh/config/wazuh.yml:rw
      # - ./kibana/config/kibana.yml:${KIBANA_DIR}/config/kibana.yml:ro
  
      #### Wazuh-manager Container Compose  #####

  wazuh.manager:
    depends_on:
      kibana: 
        condition: service_healthy
    image: wazuh/wazuh-manager:4.5.1
    container_name: wazuh
    hostname: wazuh.manager
    restart: always
    ports:
      - "1514:1514"
      - "1515:1515"
      - "514:514/udp"
      - "55000:55000"
    environment:
      - INDEXER_URL=${ELASTICSEARCH_HOSTS}
      - INDEXER_USERNAME=${ELASTICSEARCH_USERNAME}
      - INDEXER_PASSWORD=${ELASTIC_PASSWORD}
      - FILEBEAT_SSL_VERIFICATION_MODE=none
      - SSL_CERTIFICATE_AUTHORITIES=/etc/ssl/root-ca.crt
      - SSL_CERTIFICATE=/etc/ssl/filebeat.crt
      - SSL_KEY=/etc/ssl/filebeat.key
      - WAZUH_API_USERNAME=${WAZUH_API_USERNAME}
      - WAZUH_API_PASSWORD=${WAZUH_API_PASSWORD}
    volumes:
      - wazuh_api_configuration:/var/ossec/api/configuration
      - wazuh_etc:/var/ossec/etc
      - wazuh_logs:/var/ossec/logs
      - wazuh_queue:/var/ossec/queue
      - wazuh_var_multigroups:/var/ossec/var/multigroups
      - wazuh_integrations:/var/ossec/integrations
      - wazuh_active_response:/var/ossec/active-response/bin
      - wazuh_agentless:/var/ossec/agentless
      - wazuh_wodles:/var/ossec/wodles
      - filebeat_etc:/etc/filebeat
      - filebeat_var:/var/lib/filebeat
      - ./config/wazuh_indexer_ssl_certs/ca.crt:/etc/ssl/root-ca.crt
      - ./config/wazuh_indexer_ssl_certs/wazuh.manager.crt:/etc/ssl/filebeat.crt
      - ./config/wazuh_indexer_ssl_certs/wazuh.manager.key:/etc/ssl/filebeat.key
      - ./config/wazuh_cluster/wazuh_manager.conf:/wazuh-config-mount/etc/ossec.conf
      - ./config/custom-jira:/var/ossec/integrations/custom-jira  
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I https://wazuh.manager:55000 -k | grep -q 'HTTP/1.1 405 Method Not Allowed'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  wazuh_api_configuration:
  wazuh_etc:
  wazuh_logs:
  wazuh_queue:
  wazuh_var_multigroups:
  wazuh_integrations:
  wazuh_active_response:
  wazuh_agentless:
  wazuh_wodles:
  filebeat_etc:
  filebeat_var:

networks:
  default:
    driver: bridge

